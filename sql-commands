# sql vs mysql
SQL is a query language, whereas MySQL is a relational database that uses SQL to query a database.

a database, like a MySQL database, is just a bunch of tables aka a relational database

databases hold data tables: a collection of columns (headers) and rows (data)

# table data types

when creating tables, admin must specify what type of data is allowed in that column

INTs, FLOATs, and BIGINTs are most common numeric data type

VARCHAR, not CHAR which requires a fixed length, is most common string data type

NUMERIC TYPES:
INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT, DECIMAL, NUMERIC, FLOAT, DOUBLE, BIT

STRING TYPES:
CHAR, VARCHAR(n-length), BINARY, VARBINARY, BLOB, TINYBLOB, MEDIUMBLOB, LONGBLOB, TEXT, TINYTEXT, MEDIUMTEXT, LONGTEXT, ENUM

DATE TYPES:
DATE, DATETIME, TIMESTAMP, TIME, YEAR

# general rules
always end the command line with a semicolon or the code won't execute

the sql commands don't have to be capatalized, but it helps distinguish

when creating a db, use a plural name

# SQL COMMANDS

CREATE DATABASE <database_name>;

SHOW DATABASES;

DROP DATABASE <database_name>;

# tells mysql which database we want to work with

USE <database_name>; 

# tell currently used database

SELECT database();

if you delete a database use you are currently using, the SELECT database(); command will return NULL

# create a table in easy to read multi-line composition

CREATE TABLE <tablename_in_plural_form>
	(
		column_name data_type, 
		column_name data_type
	);

ex:

CREATE TABLE pastries
    (
        name VARCHAR(50), 
        quantity INT
    );

ex 2:

'note that SIZE is a reserved SQL keyword so do not use it'

CREATE TABLE shirts(
    shirt_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    article VARCHAR(100),
    color VARCHAR(100),
    shirt_size VARCHAR(1),
    last_worn INT NOT NULL DEFAULT 0
);

# when in target db, show tables in current db

SHOW TABLES;

# when in target db, show data from target table

DESC <table_name>;

SHOW COLUMNS FROM <table_name>;

# when in target db, remove target table

DROP TABLE <table_name>;

# insert data into a table in a target db
# each value has to correspond to the column data type
# order of column arguments has to match value arguments

INSERT INTO <table_name>
	(
		column_name,
		column_name
	)
VALUES
	(
		value,
		value
	);

# insert multiple values into a table in a target db

INSERT INTO verbs(
        name,
        age
    )
    VALUES
        ('Peanut', 4),
        ('Butter', 10),
        ('Jelly', 7);

# select the data for viewing in a table when in a target db

SELECT * FROM <table_name>;

# If you're wondering how to insert a string (VARCHAR) value that contains quotations, then here's how.

Escape the quotes with a backslash: 
"This text has \"quotes\" in it" or 'This text has \'quotes\' in it'

Alternate single and double quotes:
"This text has 'quotes' in it" or 'This text has "quotes" in it'

# mysql warnings

If you happen to encounter an error instead of a warning.

The solution is to run the following command in your mysql shell: 
set sql_mode='';

SHOW WARNINGS;

example:

if a VARCHAR(5) column, has a string that exceeds 5 characters

# null means value is unknown

null DOES NOT mean zero

To enforce NOT NULL when creating a table, use NOT NULL

ex:

CREATE TABLE cats2
	(
		name VARCHAR(100) NOT NULL,
		age INT NOT NULL
	);

# default values 

to set a default value, set DEFAULT and value when creating a table

ex:

CREATE TABLE cats3
	(
		name VARCHAR(100) DEFAULT 'unnamed',
		age INT DEFAULT 99
	);

# using both DEFAULT VALUES and NOT NULL

This is not redundant because this prevents the user from manually inserting a NULL value

Below ex would insert a NULL value:

INSERT INTO cats3(name, age) VALUES('Montana', NULL);

Below ex would prevent a NULL value and have a default value when creating a table:

CREATE TABLE cats5
	(
		name VARCHAR(4) NOT NULL DEFAULT 'unnamed',
		age INT NOT NULL DEFAULT 99
	);

Below ex would return an ERROR:

INSERT INTO cats5
    (
        name,
        age
    )
    VALUES
    ('Cali', NULL);

# Primary Keys are used as unique IDs for organizing data in a table

when DESC a table, the key column would list PRI instead of empty

if you attempt to add data that has a duplicate primary value, will return ERROR
ex:

CREATE TABLE cats6
	(
		cat_id INT NOT NULL PRIMARY KEY,
		name VARCHAR(100),
		age INT,
	);

INSERT INTO cats6
    (cat_id, name, age)
    VALUES
    (1, 'fred', 33);

# Auto Increment Primary Keys removes manual input for Primary Keys

ex:

CREATE TABLE cats7
	(
		cat_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
		name VARCHAR(100),
		age INT,
	);

# CRUD = create, read, update, delete

# read = SELECT 

* = return all columns

can target specific columns

ex: SELECT name FROM cats;

can target multiple columns with a comma seperated list
- order matters in the comma seperated list

ex: SELECT name, age FROM cats;

# WHERE = specific filtering commands

Below selects all columns from cats table where age is 4 

SELECT * FROM cats WHERE age=4;

Below selects all columns from cats table where name is Egg
- case insensitive

SELECT * FROM cats WHERE name='Egg';

Below allows you to compare columns
SELECT cat_id, age FROM cats WHERE cat_id=age;

# aliases = specify how data is presented from query

SELECT cat_id AS id, name FROM cats;

SELECT name AS 'cat_name', breed AS 'type_of_cat' FROM cats;

# UPDATE = change existing data

process should be use SELECT to target desired data set before using UPDATE

ex: 

SELECT * FROM cats
	WHERE breed='Tabby';

UPDATE cats 
	SET breed='Shorthair'
		WHERE breed='Tabby';

ex 2:

SELECT * FROM cats
	WHERE color='off white';

UPDATE shirts
    SET shirt_size='X', color='not white'
    WHERE color='off white';


# DELETE = remove existing data

process should be use SELECT to target desired data set before using DELETE
- when data is deleted and there is an AUTO_INCREMENT PRIMARY KEY, the keys don't shift to compensate for the deleted dataset

ex:

SELECT * FROM cats
    WHERE name='Egg';

DELETE FROM cats
    WHERE name='Egg';

SELECT * FROM cats;

# DELETE FROM <table_name> = delete all enteries in table, but table shell remains


